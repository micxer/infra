{{ ansible_managed | comment }}
---
services:
  traefik:
    container_name: traefik
    image: traefik:2.11.3
    environment:
      HOSTINGDE_API_KEY: "{{ hostingde_api_key }}"
      HOSTINGDE_ZONE_NAME: "{{ base_domain }}"
      TZ: Europe/Berlin
    labels:
      traefik.enable: "true"

      # # catch all traefik errors
      traefik.http.routers.globalerrorpage.rule: hostregexp(`{host:.+}`)
      traefik.http.routers.globalerrorpage.entrypoints: websecure
      traefik.http.routers.globalerrorpage.service: error-pages-service
      # traefik.http.routers.globalerrorpage.tls.certresolver: hostingde
      traefik.http.routers.globalerrorpage.priority: 1

      # # create a middleware to replace 404 errors by a standard page
      # traefik.http.middlewares.errorpage.errors.status: 404
      # traefik.http.middlewares.errorpage.errors.service: error-pages-service
      # traefik.http.middlewares.errorpage.errors.query: /{status}

      # # create a middleware to redirect to www
      # traefik.http.middlewares.redirect-to-www.redirectregex.regex: (https|http)://(?:www.)?(.*)
      # traefik.http.middlewares.redirect-to-www.redirectregex.replacement: https://www.$${2}

      # # create a middleware to redirect to non-www
      # traefik.http.middlewares.redirect-to-nonwww.redirectregex.regex: (https|http)://(www\.(.*))
      # traefik.http.middlewares.redirect-to-nonwww.redirectregex.replacement: https://$${3}

      # create a middleware named admin, to request a basic authentification of users
      # you can generate a user:password pair with this command :
      # echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g
      # traefik.http.middlewares.admin.basicauth.users: admin:HASHED_PASSWORD

      # api secure
      traefik.http.routers.traefik.rule: Host(`traefik.{{ local_domain }}`)
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: "default@file"
      traefik.http.routers.traefik.tls.options: modern@file

      # ping secure
      traefik.http.routers.ping.rule: Host(`traefik.{{ local_domain }}`) && PathPrefix(`/ping`)
      traefik.http.routers.ping.entrypoints: websecure
      traefik.http.routers.ping.middlewares: "default@file"
      traefik.http.routers.ping.service: ping@internal
      traefik.http.routers.ping.tls.options: modern@file
    networks:
      traefik:
        ipv4_address: 172.20.1.2
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ appdata_path }}/traefik:/etc/traefik"

  error-pages:
    container_name: error-pages
    environment:
      TEMPLATE_NAME: "matrix"
    image: ghcr.io/tarampampam/error-pages:2.27
    labels:
      traefik.enable: "True"
      traefik.http.routers.error-pages-router.rule: "HostRegexp(`{host:.+}`)"
      traefik.http.routers.error-pages-router.priority: "1"
      traefik.http.routers.error-pages-router.entrypoints: "websecure"
      traefik.http.routers.error-pages-router.middlewares: "error-pages-middleware"
      traefik.http.middlewares.error-pages-middleware.errors.status: "400-599"
      traefik.http.middlewares.error-pages-middleware.errors.service: "error-pages-service"
      traefik.http.middlewares.error-pages-middleware.errors.query: "/{status}.html"
      traefik.http.services.error-pages-service.loadbalancer.server.port: "8080"
    networks:
      - traefik
    depends_on:
      - traefik

networks:
  traefik:
    name: traefik-net
    ipam:
      config:
        - subnet: 172.20.1.0/24
