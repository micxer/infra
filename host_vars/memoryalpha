---
# generic settings
main_username: micxer
main_groupname: "{{ main_username }}"
main_uid: "1000"
main_gid: "{{ main_uid }}"

# geerlingguy.docker
docker_users:
  - micxer
  - ansible

# grog.package
package_list:
  - name: bash-completion
  - name: rsync
  - name: smartmontools
  - name: tmux
  - name: vim-runtime
  - name: vim-tiny
  - name: zsh

# ironicbadger.bash-aliases (formerly ferrarimarco.bash-aliases)
bash_aliases:
  - { alias: "zspace", command: "zfs list -o space" }
  - { alias: "zsnap", command: "zfs list -o space | sort -k4 --human-numeric-sort" }
  - { alias: "dtail", command: "docker logs -tf --tail='50' "}
  - { alias: "dstop", command: "docker stop `docker ps -aq`"}
  - { alias: "drm", command: "docker rm `docker ps -aq`"}
  - { alias: "dcp", command: "docker-compose -f ~/docker-compose.yml "}
  - { alias: "dcporph", command: "docker-compose -f ~/docker-compose.yml --remove-orphans "}
  - { alias: "dprune", command: "docker image prune"}
  - { alias: "dprunesys", command: "docker system prune --all"}
  - { alias: "ctop", command: "docker run --name ctop  -it --rm -v /var/run/docker.sock:/var/run/docker.sock http://quay.io/vektorlab/ctop "}
  - { alias: "sshlist", command: "echo Currently open ssh connections && echo && l ~/.ssh/multiplex/"}
  - { alias: "dfclean", command: "df -h -x tmpfs -x zfs -t fuse.mergerfs -t xfs -t ext4"}
  - { alias: "dfzfs", command: "df -h -x tmpfs -t fuse.mergerfs -t xfs -t ext4 -t zfs"}

# mrlesmithjr.zfs
zfs_install_update: true
ubuntu_apt_repository: http://ubuntu.mirror.lrz.de/ubuntu/
zfs_key_file: "/etc/zfs/storage.key"

zfs_create_pools: true
zfs_pools:
  - name: new-storage
    action: create
    devices:
      - ata-WDC_WD120EDBZ-11B1HA0_5QGZGB4F
      - ata-WDC_WD120EDBZ-11B1HA0_5QGZWKGF
    type: mirror
    atime: off
    compression: lz4
    xattr: sa
    acltype: posixacl
    options:
      - "-o ashift=12"
      - "-m /mnt/storage"
      - "-o feature@encryption=enabled"
      - "-O encryption=aes-256-gcm"
      - "-O keylocation=file://{{ zfs_key_file }}"
      - "-O keyformat=passphrase"
    state: present

zfs_autoload_encryption_keys: true
zfs_create_filesystems: true
zfs_filesystems:
  - name: traefik # Filesystems for the traefik configuration and Let's Encrypt certificates
    pool: new-storage
    # latency (default) | throughput
    logbias: latency
    # Define an alternate mountpoint
    # mountpoint: /var/lib/docker
    # all (default) | none | metadata
    quota: 256M
    # Controls whether the snapshots devices of zvol's are hidden or visible. hidden (default) | visible
    snapdev: hidden
    # Controls whether the .zfs directory is hidden or visible in the root of the file system. hidden (default) | visible
    snapdir: hidden
    state: present
  - name: nextcloud
    pool: new-storage
    # latency (default) | throughput
    logbias: latency
    quota: 1T
    # Controls whether the snapshots devices of zvol's are hidden or visible. hidden (default) | visible
    snapdev: hidden
    # Controls whether the .zfs directory is hidden or visible in the root of the file system. hidden (default) | visible
    snapdir: hidden
    state: present
  - name: mariadb # One filesystem for the database and one for the logs to enable different settings
    pool: new-storage
    quota: 4G
    primarycache: metadata
    snapdev: hidden
    snapdir: hidden
    state: present
  - name: mariadb/log
    pool: new-storage
    quota: 1G
    recordsize: 128k
    snapdev: hidden
    snapdir: hidden
    state: present
  - name: mariadb/data
    pool: new-storage
    quota: 3G
    logbias: throughput
    recordsize: 16k
    snapdev: hidden
    snapdir: hidden
    state: present
  - name: windows-ssd
    pool: new-storage
    quota: 250G
    snapdev: hidden
    snapdir: hidden
    state: present
  #   sync: disabled  # maybe one more option to increase performance, see https://kitcharoenp.github.io/mysql/zfs/mariadb/2021/10/18/zfs-tunning-optimization.html

  # - name: Shares/Movies
  #   compression: lz4
  #   group: nogroup
  #   mountpoint: /TANK/Shares/Movies
  #   owner: nobody
  #   pool: TANK
  #   quota: none
  #   sharesmb: true
  #   smb_options:
  #     browseable: "yes"
  #     comment: ""
  #     create_directory_mask: "0755"
  #     create_mask: "0777"
  #     guest_ok: "yes"
  #     read_only: "no"
  #     share_name: Movies
  #     writable: "yes"
  #   xattr: sa
  #   acltype: posixacl
  #   state: present
  #   #standard (default) | always | disabled
  #   sync: disabled
  # - name: encrypted-fs
  #   pool: tank
  #   state: present
  #   # The encryption algorithm to use, or just "on" to use the default one picked by ZFS.
  #   encryption: aes-256-gcm
  #   # Where to lookup the key on the filesystem.  Prompt is not supported by this role.
  #   keylocation: "file:///use/local/etc/zfs/keys/tank/encyrpted-fs"
  #   # passphrase | hex | raw
  #   keyformat: "hex"

zfs_enable_auto_snapshots: false

# defines global scrub cron job parameters. Only applies when `zfs_enable_monitoring` is set to True.
zfs_pools_scrub_cron:
  minute: 42
  hour: 0
  day: "15"
  month: "*"
  weekday: "*"

zfs_enable_monitoring: false
zfs_monitoring_scrub_max_age: 8

# ironicbadger.docker_compose_generator
appdata_path: /mnt/storage
local_domain: "home.{{ base_domain }}"

#traefik config
traefik_file_provider: true
traefik_config_path: "{{ appdata_path }}/traefik"
traefik_base_domain: "home.{{ base_domain }}"

containers:
  ###
  - service_name: traefik
    active: true
    image: traefik:2.11.3
    container_name: traefik
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ appdata_path }}/traefik:/etc/traefik"
    # networks:
    #   - proxy
    environment:
      HOSTINGDE_API_KEY: "{{ hostingde_api_key }}"
      HOSTINGDE_ZONE_NAME: "{{ base_domain }}"
      TZ: Europe/Berlin
    labels:
      traefik.enable: "true"

      # # catch all traefik errors
      traefik.http.routers.globalerrorpage.rule: hostregexp(`{host:.+}`)
      traefik.http.routers.globalerrorpage.entrypoints: websecure
      traefik.http.routers.globalerrorpage.service: error-pages-service
      # traefik.http.routers.globalerrorpage.tls.certresolver: hostingde
      traefik.http.routers.globalerrorpage.priority: 1

      # # create a middleware to replace 404 errors by a standard page
      # traefik.http.middlewares.errorpage.errors.status: 404
      # traefik.http.middlewares.errorpage.errors.service: error-pages-service
      # traefik.http.middlewares.errorpage.errors.query: /{status}

      # # create a middleware to redirect to www
      # traefik.http.middlewares.redirect-to-www.redirectregex.regex: (https|http)://(?:www.)?(.*)
      # traefik.http.middlewares.redirect-to-www.redirectregex.replacement: https://www.$${2}

      # # create a middleware to redirect to non-www
      # traefik.http.middlewares.redirect-to-nonwww.redirectregex.regex: (https|http)://(www\.(.*))
      # traefik.http.middlewares.redirect-to-nonwww.redirectregex.replacement: https://$${3}

      # create a middleware named admin, to request a basic authentification of users
      # you can generate a user:password pair with this command :
      # echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g
      # traefik.http.middlewares.admin.basicauth.users: admin:HASHED_PASSWORD

      # api secure
      traefik.http.routers.traefik.rule: Host(`traefik.{{ local_domain }}`)
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: "default@file"
      traefik.http.routers.traefik.tls.options: modern@file

      # ping secure
      traefik.http.routers.ping.rule: Host(`traefik.{{ local_domain }}`) && PathPrefix(`/ping`)
      traefik.http.routers.ping.entrypoints: websecure
      traefik.http.routers.ping.middlewares: "default@file"
      traefik.http.routers.ping.service: ping@internal
      traefik.http.routers.ping.tls.options: modern@file
    restart: unless-stopped
  ###
  - service_name: error-pages
    active: true
    container_name: error-pages
    image: ghcr.io/tarampampam/error-pages:2.27
    # networks:
    #   - proxy
    environment:
      TEMPLATE_NAME: matrix # set the error pages template
    labels:
      traefik.enable: true
      # use as "fallback" for any NON-registered services (with priority below normal)
      traefik.http.routers.error-pages-router.rule: HostRegexp(`{host:.+}`)
      traefik.http.routers.error-pages-router.priority: 10
      # should say that all of your services work on https
      traefik.http.routers.error-pages-router.entrypoints: websecure
      traefik.http.routers.error-pages-router.middlewares: error-pages-middleware
      # "errors" middleware settings
      traefik.http.middlewares.error-pages-middleware.errors.status: 400-599
      traefik.http.middlewares.error-pages-middleware.errors.service: error-pages-service
      traefik.http.middlewares.error-pages-middleware.errors.query: /{status}.html
      # define service properties
      traefik.http.services.error-pages-service.loadbalancer.server.port: 8080
    depends_on:
      - traefik
  ###
  - service_name: nextcloud
    active: true
    image: nextcloud:28.0.5-apache
    devices:
      - /dev/dri:/dev/dri
    # networks:
    #   - proxy
    #   - nextcloud
    environment:
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: nextcloud
      MYSQL_PASSWORD: "{{ nextcloud_mysql_password }}"
      MYSQL_HOST: mariadb
      NEXTCLOUD_ADMIN_USER: "{{ nextcloud_admin_user }}"
      NEXTCLOUD_ADMIN_PASSWORD: "{{ nextcloud_admin_password }}"
      NEXTCLOUD_TRUSTED_DOMAINS: "nextcloud.{{ local_domain }}"
      SMTP_HOST: "{{ nextcloud_smtp_host }}"
      SMTP_SECURE: tls # tls | ssl | <empty>  
      SMTP_PORT: 587
      SMTP_AUTHTYPE: PLAIN # LOGIN | PLAIN | CRAM-MD5 | <empty>
      SMTP_NAME: "{{ nextcloud_smtp_name }}"
      SMTP_PASSWORD: "{{ nextcloud_smtp_password }}"
      MAIL_FROM_ADDRESS: notify # local-part for the 'from' field in the emails sent by Nextcloud
      MAIL_DOMAIN: "nextcloud.{{ local_domain }}"
      PHP_MEMORY_LIMIT: 1024M # 512M is the minimum recommended by Nextcloud
      PHP_UPLOAD_LIMIT: 1024M # 512M is the minimum recommended by Nextcloud
    labels:
      traefik.enable: true
      traefik.http.routers.nextcloud.rule: Host(`nextcloud.{{ local_domain }}`)
      traefik.http.routers.nextcloud.entrypoints: websecure
      traefik.http.routers.nextcloud.middlewares: "default@file"
      traefik.http.routers.nextcloud.tls.options: modern@file
    volumes:
      - "{{ appdata_path }}/nextcloud/data:/var/www/html/data"
      - "{{ appdata_path }}/nextcloud/config:/var/www/html/config"
      - "{{ appdata_path }}/nextcloud/custom_apps:/var/www/html/custom_apps"
    depends_on:
      - mariadb
    restart: unless-stopped
  ###
  - service_name: mariadb
    active: true
    image: mariadb:11.2
    # networks:
    #   - nextcloud
    command:
      - --datadir=/var/lib/mysql/data
      - --innodb-log-group-home-dir=/var/lib/mysql/log
      - --transaction-isolation=READ-COMMITTED
      - --log-bin=binlog
      - --binlog-format=MIXED
      - --sync-binlog=0
      - --skip-innodb-doublewrite
      - --innodb_file_per_table
      - --innodb-log-write-ahead-size=16384
      - --innodb-flush-neighbors=0
      - --innodb-use-native-aio=0
      - --innodb-use-atomic-writes=0
      - --innodb-compression-default=0
      - --innodb-flush-log-at-trx-commit=0
      - --innodb-file-per-table
      - --innodb-io-capacity=1000
      - --innodb-io-capacity-max=2500
      # https://kitcharoenp.github.io/mysql/zfs/mariadb/2021/10/18/zfs-tunning-optimization.html#mysql-tuning-and-optimization-for-zfs
    environment:
      MARIADB_ROOT_PASSWORD: "{{ container_mysql_root_password }}"
      MARIADB_DATABASE: nextcloud
      MARIADB_USER: nextcloud
      MARIADB_PASSWORD: "{{ nextcloud_mysql_password }}"
    volumes:
      - "{{ appdata_path }}/mariadb:/var/lib/mysql"
    restart: unless-stopped
  ###

# backup
backup_script_path: /root/bin

# dbrennand.autorestic
autorestic_version: 1.8.2
autorestic_restic_version: 0.16.4
autorestic_config_file: /root/.autorestic.yml
autorestic_config:
  version: 2
  backends:
    backblaze:
      type: s3
      path: s3.eu-central-003.backblazeb2.com/memoryalpha-restic-backup
      key: "{{ autorestic_key }}"
      env:
        AWS_ACCESS_KEY_ID: "{{ autorestic_AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "{{ autorestic_AWS_SECRET_ACCESS_KEY }}"
  locations:
    nextcloud:
      cron: "15 * * * *"
      from: "{{ appdata_path }}/nextcloud/.zfs/snapshot/restic"
      to: backblaze
      forget: prune
      hooks:
        before:
          - "{{ backup_script_path }}/nextcloud_container_backup_before.sh"
        success:
          - "{{ backup_script_path }}/nextcloud_container_backup_success.sh"
        failure:
          - echo "Something went wrong"
      options:
        forget:
          keep-daily: 7 # keep 4 last daily snapshots
          keep-weekly: 8 # keep 1 last weekly snapshots
          keep-monthly: 12 # keep 12 last monthly snapshots
          keep-yearly: 7 # keep 7 last yearly snapshots
          keep-within: '14d' # keep snapshots from the last 14 days
autorestic_info: true
autorestic_check: true
autorestic_cron: true
autorestic_cron_verbose: true
autorestic_state: present
